from aiogram import F, Router
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from db.models import get_user_data, save_user_data

user_data = {}

router = Router()


class Reg(StatesGroup):
    id_user = State()
    vin = State()
    year = State()


@router.message(Command('start'))
async def start_command(message: Message, state: FSMContext):
    await state.set_state(Reg.vin)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëã, {message.from_user.full_name}!\n'
                         f'–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç.'
                         f'üîç –í–≤–µ–¥–∏ VIN –∏ –≥–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—èüöó –ø–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µüëá ‚Äî –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–µ—Ç–∞–ª–∏.\n\n'
                         f'–í–∞—à VIN: ')


@router.message(Command("reply"))
async def reply_to_user(message: Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply ID —Ç–µ–∫—Å—Ç")
        return

    user_id, text = args[1], args[2]

    try:
        chat = await message.bot.get_chat(user_id)
        await message.bot.send_message(chat.id, text)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat.id}!")
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {e}")


@router.message(Reg.vin)
async def reg_vin(message: Message, state: FSMContext):
    await state.update_data(vin=message.text)
    await state.set_state(Reg.year)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ')


@router.message(Reg.year)
async def reg_number(message: Message, state: FSMContext):
    await state.update_data(year=message.text)
    await state.set_state(Reg.id_user)
    await message.answer("–ò –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ: ")


@router.message(Reg.id_user)
async def finish_reg(message: Message, state: FSMContext):
    await state.update_data(id_user=message.from_user.id)
    data = await state.get_data()
    user_data[message.from_user.id] = {
        "vin": data["vin"],
        "year": data["year"]
    }
    await save_user_data(str(message.from_user.id), data["vin"], data["year"])

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å: ')
    await message.bot.send_message(-1002200498147, f'üîπ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n'
                                                   f'üë§ ID: {message.from_user.id}\n'
                                                   f'üöó VIN: {data["vin"]}\n'
                                                   f'üìÖ –ì–æ–¥: {data["year"]}')
    await state.clear()


@router.message()
async def forward_to_group(message: Message):
    user_id = str(message.from_user.id)
    user_info = await get_user_data(user_id)

    if user_info:
        vin, year = user_info
    else:
        vin, year = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    text = f'üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name}:\n' \
           f'üë§ ID: {user_id}\n' \
           f'üöó VIN: `{vin}`\n' \
           f'üìÖ –ì–æ–¥: {year}\n' \
           f'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}'

    await message.bot.send_message(-1002200498147, text, parse_mode="MARKDOWN")
